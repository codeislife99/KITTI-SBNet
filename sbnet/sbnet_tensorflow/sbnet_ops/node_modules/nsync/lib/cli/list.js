
/* Module that lists modules. */
var Module, firstDirectory, fs, globalPaths, listModules, removeDuplicates, _ref;

fs = require('fs');

_ref = require('module'), globalPaths = _ref.globalPaths, Module = _ref.Module;

removeDuplicates = function(array) {

  /* Return a copy of *array* with duplicates removed. */
  var key, map, value, _i, _ref1;
  map = {};
  for (key = _i = 0, _ref1 = array.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; key = 0 <= _ref1 ? ++_i : --_i) {
    map[array[key]] = array[key];
  }
  return (function() {
    var _results;
    _results = [];
    for (key in map) {
      value = map[key];
      _results.push(value);
    }
    return _results;
  })();
};

firstDirectory = function(paths) {

  /* Return first directory found in *paths*, or null if none is found. */
  var dir, error, stat, _i, _len;
  for (_i = 0, _len = paths.length; _i < _len; _i++) {
    dir = paths[_i];
    try {
      stat = fs.statSync(dir);
      if (stat.isDirectory()) {
        return dir;
      }
    } catch (_error) {
      error = _error;
      if (error.code !== 'ENOENT') {
        throw error;
      }
    }
  }
  return null;
};

listModules = function(cwd, includeGlobal) {
  var dir, localPaths, modulePaths, modules, _i, _len;
  if (includeGlobal == null) {
    includeGlobal = true;
  }

  /* Return a list of available modules for a script running from *cwd*.
      Will also include global modules if *includeGlobal* is true.
   */
  modules = [];
  modulePaths = [];
  if (includeGlobal) {
    globalPaths = globalPaths.filter(function(item) {
      return item.length;
    });
    modulePaths.push(firstDirectory(globalPaths));
  }
  localPaths = Module._nodeModulePaths(cwd);
  modulePaths.push(firstDirectory(localPaths));
  for (_i = 0, _len = modulePaths.length; _i < _len; _i++) {
    dir = modulePaths[_i];
    if (dir == null) {
      continue;
    }
    modules = modules.concat(fs.readdirSync(dir));
  }
  modules = modules.filter(function(name) {
    return name[0] !== '.';
  });
  return removeDuplicates(modules);
};

module.exports = listModules;

//# sourceMappingURL=list.map