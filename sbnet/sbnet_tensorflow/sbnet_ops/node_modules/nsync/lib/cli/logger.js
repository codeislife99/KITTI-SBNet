var CliStream, DEBUG, ERROR, FATAL, INFO, TRACE, WARN, bunyan, chalk, createLogger, formatDiff, humanSize, levelString, stream, stripRecord, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bunyan = require('bunyan');

stream = require('stream');

util = require('util');

chalk = require('chalk');

TRACE = bunyan.TRACE, DEBUG = bunyan.DEBUG, INFO = bunyan.INFO, WARN = bunyan.WARN, ERROR = bunyan.ERROR, FATAL = bunyan.FATAL;

levelString = function(level) {
  switch (level) {
    case TRACE:
      return chalk.gray('trace');
    case DEBUG:
      return chalk.cyan('debug');
    case INFO:
      return chalk.green(' info');
    case WARN:
      return chalk.yellow(' warn');
    case ERROR:
      return chalk.red('error');
    case FATAL:
      return chalk.red.inverse('fatal');
    default:
      return 'unknown';
  }
};

stripRecord = function(record) {
  var key, rv;
  rv = {};
  for (key in record) {
    if (key === 'name' || key === 'level' || key === 'hostname' || key === 'pid' || key === 'msg' || key === 'time' || key === 'v' || key === 'src' || key === 'err') {
      continue;
    }
    rv[key] = record[key];
  }
  return rv;
};

humanSize = function(bytes) {

  /* Format *bytes* as a string a human can understand. */
  var num, rv, size, stuffix, _i, _len, _ref;
  rv = '0 B';
  _ref = [' B', ' kB', ' MB', ' GB', ' TB'];
  for (num = _i = 0, _len = _ref.length; _i < _len; num = ++_i) {
    stuffix = _ref[num];
    size = Math.pow(1024, num);
    if (bytes >= size) {
      rv = (bytes / size).toFixed(1).replace(/\.0$/, '') + stuffix;
    }
  }
  return rv;
};

formatDiff = function(diff) {

  /* Format *diff* with pretty colors. */
  var delta, marker, rv, sign;
  rv = null;
  marker = '●';
  switch (diff.type) {
    case 'new':
      rv = "" + (chalk.green(marker)) + " " + diff.file + " " + (chalk.gray(humanSize(diff.size)));
      break;
    case 'change':
      rv = "" + (chalk.yellow(marker)) + " " + diff.file + " ";
      delta = diff.size - diff.oldSize;
      sign = delta > 0 ? '+' : '-';
      rv += chalk.gray(sign + humanSize(Math.abs(delta)));
      break;
    case 'delete':
      rv = "" + (chalk.red(marker)) + " " + diff.file;
  }
  return rv;
};

CliStream = (function(_super) {
  __extends(CliStream, _super);


  /* Bunyan object-stream formatter. */

  function CliStream(debug) {
    if (debug == null) {
      debug = false;
    }
    if (debug) {
      this.write = this.writeDebug;
    }
    CliStream.__super__.constructor.call(this);
  }

  CliStream.prototype._read = function(size) {};

  CliStream.prototype.write = function(record) {
    var out;
    if (record.diff != null) {
      out = formatDiff(record.diff);
    } else {
      out = record.msg;
    }
    if (record.level >= ERROR) {
      out = "" + (chalk.red('error')) + " " + out;
    }
    this.push(out + '\n');
  };

  CliStream.prototype.writeDebug = function(record) {
    var fname, metadata, out, _ref;
    out = levelString(record.level);
    out += ' ' + record.msg;
    metadata = stripRecord(record);
    if (Object.keys(metadata).length > 0) {
      out += '\n      ' + util.inspect(metadata, {
        colors: true
      }).replace(/\n/g, ' ').replace(/\s\s+/g, ' ');
    }
    if (record.src) {
      fname = (_ref = record.src.func) != null ? _ref : '(anonymous)';
      out += "\n      " + fname + " " + record.src.file + ":" + record.src.line;
    }
    if (record.err) {
      out += '\n\n      ' + record.err.stack.replace(/\n/g, '\n      ');
    }
    this.push(out + '\n\n');
  };

  return CliStream;

})(stream.Duplex);

createLogger = function(level, outputStream) {

  /* Create a bunyan logger using a CliStream using
      *level* and piped to *outputStream*.
   */
  var logger, rawStream;
  rawStream = new CliStream;
  rawStream.pipe(outputStream);
  logger = bunyan.createLogger({
    name: 'nsync',
    streams: [
      {
        level: level,
        type: 'raw',
        stream: rawStream
      }
    ]
  });
  return logger;
};

module.exports = {
  CliStream: CliStream,
  createLogger: createLogger
};

//# sourceMappingURL=logger.map