var S3Transport, knox, mime;

knox = require('knox');

mime = require('mime');

S3Transport = (function() {
  function S3Transport(options) {
    this.key = options.key;
    this.secret = options.secret;
    this.bucket = options.bucket;
  }

  S3Transport.prototype.setup = function(callback) {
    this.client = knox.createClient({
      key: this.key,
      secret: this.secret,
      bucket: this.bucket
    });
    return callback();
  };

  S3Transport.prototype.listDirectory = function(dirname, callback) {
    var prefix;
    prefix = dirname.replace(/^(.\/|\/)/g, '');
    return this.client.list({
      prefix: prefix
    }, function(error, data) {
      var files;
      files = data != null ? data.Contents.map(function(item) {
        return item.Key;
      }) : void 0;
      return callback(error, files);
    });
  };

  S3Transport.prototype.makeDirectory = function(dirname, callback) {
    return callback();
  };

  S3Transport.prototype.deleteDirectory = function(dirname, callback) {
    return callback();
  };

  S3Transport.prototype.getFile = function(filename, callback) {
    return this.client.getFile(filename, callback);
  };

  S3Transport.prototype.putFile = function(filename, size, stream, callback) {
    var headers;
    headers = {
      'Content-Length': size,
      'Content-Type': mime.lookup(filename)
    };
    return this.client.putStream(stream, filename, headers, callback);
  };

  S3Transport.prototype.deleteFile = function(filename, callback) {
    return client.deleteFile(filename, callback);
  };

  return S3Transport;

})();

S3Transport.options = {
  key: {
    required: true,
    description: 'S3 key'
  },
  secret: {
    required: true,
    description: 'S3 secret'
  },
  bucket: {
    required: true,
    description: 'S3 bucket'
  }
};

module.exports = S3Transport;

//# sourceMappingURL=s3.map