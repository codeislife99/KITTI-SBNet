

Connection = require 'ssh2'
constants = process.binding 'constants'

isDirectory = (attrs) ->
  ((attrs.mode & constants.S_IFMT) is constants.S_IFDIR)

path = require 'path'
fs = require 'fs'

class SFTP

  constructor: (options) ->
    @host = options.host
    @port = options.port
    @username = options.username
    key = '/Users/jnordberg/.ssh/id_rsa'
    @privateKey = fs.readFileSync(key).toString()

  setup: (callback) ->
    @connection = new Connection
    @connection.on 'ready', =>
      @open = true
      @logger.verbose 'ssh ready'
      @connection.sftp (error, @sftp) =>
        @logger.verbose 'sftp open'
        @sftp.on 'error', (error) =>
          @logger.error 'sftp error!', error
          console.log 'SFTP ERROR', error
        @sftp.on 'end', @__onSftpEnd
        callback error

    @__onConnectionEnd = =>
      @logger.error 'ssh connection closed unexpectedly'
    @__onSftpEnd = =>
      @logger.error 'sftp connection closed unexpectedly'

    @connection.on 'end', @__onConnectionEnd
    @connection.on 'error', callback
    @connection.connect {@host, @username, @privateKey}

  cleanup: (callback) ->
    @open = false
    @sftp.removeListener 'end', @__onSftpEnd
    @connection.removeListener 'end', @__onConnectionEnd
    @sftp.end()
    @connection.end()

  listDirectory: (dirname, callback) ->
    @sftp.opendir dirname, (error, handle) =>
      return callback error if error?
      @sftp.readdir handle, (error, list) ->
        if not error?
          rv = []
          for file in list
            continue if file.filename is '.' or file.filename is '..'
            if isDirectory file.attrs
              rv.push file.filename + '/'
            else
              rv.push file.filename
        callback error, rv

  makeDirectory: (dirname, callback) ->
    @sftp.mkdir dirname, callback

  deleteDirectory: (dirname, callback) ->
    @sftp.rmdir dirname, callback

  createReadStream: (filename) ->
    @sftp.createReadStream filename

  putFile: (filename, size, stream, callback) ->
    writeStream = @sftp.createWriteStream filename
    writeStream.on 'close', callback
    stream.pipe writeStream

  deleteFile: (filename, callback) ->
    @sftp.unlink filename, callback


SFTP.options =
  host:
    required: true
    description: 'hostname'
  username:
    required: true
    description: 'username'


module.exports = SFTP
